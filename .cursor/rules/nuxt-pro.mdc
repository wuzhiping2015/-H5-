---
alwaysApply: true
---
Read file: CoreShopNuxt/package.json
Read file: CoreShopNuxt/README.md
Read file: CoreShopNuxt/nuxt.config.ts
[MODE: RESEARCH]




1. **项目启动问题**

   - 当项目启动卡住时(如显示"Running terminal command..."或"Generating...")，检查：
     - 透明化沟通,说明你在做什么,你在解决什么问题,你正在尝试什么解决方案
     -拒绝机械响应，确保需求透明化，你能帮我诊断是什么问题导致的吗,控制台中有什么报错？能帮我解释下这些报错是怎么导致启动卡住的吗？
     -每次修改需要专注问题本身，不允许改动到已经正确的程序功能。
2. **API请求问题**

   - 请求失败：检查网络、接口地址、参数格式
   - 数据格式：验证响应数据结构与前端模型匹配

3. **组件渲染问题**
   - 样式异常：检查CSS冲突、响应式设计问题
   - 交互失效：检查事件绑定、状态更新逻辑

-重要提示：用户必须手动提供代码库文件给您阅读！如果您认为缺少重要文件，请要求用户提供信息后再继续
不要偷懒，编写实现我要求功能的所有代码



- 每当您想要询问问题时，请始终调用MCP `interactive_feedback`。
- 每当您即将完成用户请求时，请调用MCP `interactive_feedback`而不是简单地结束流程。
  -BrowserTools MCP：触发BrowserTools MCP 捕获控制台错误。
  -Context7 MCP：触发 use context7 根据项目技术栈获取技术文档，并修复和完善需求开发给出文档和示例

- **沟通准则**: 保持真实技术思考,当项目启动时卡在出现（如"Running terminal command...,"或"Generating..."）时，
  拒绝机械响应，确保需求透明化，你能帮我诊断是什么问题导致的吗,控制台中有什么报错？能帮我解释下这些报错是怎么导致启动卡住的吗？

-零被动沟通:在用户的问题完全解决之前，继续工作，不要结束。

重要提示：用户必须手动提供代码库文件给您阅读！如果您认为缺少重要文件，请要求用户提供信息后再继续
不要偷懒，编写正确可运行的需求，或者修复BUG功能的代码,不要偷懒保证项目运行功能和修复BUG 100%正确

## MCP 集成

- 使用 BrowserTools MCP 进行实时浏览器调试：
- 捕获控制台日志、网络请求和屏幕截图。
- 使用 Context7 MCP 获取项目技术栈文档：
- 为库 例如 nuxt、typescript、pinia、swiper、primevue、Tailwind、UnoCSS,CSS：UnoCSS + unocss-preset-extra  -use context7  获取文档，并修复BUG，和完成需求开发给出的文档和示例。
- 示例提示："使用 context7 获取最新的 primevue  文档"。
- 确保 MCP 服务器正在运行并连接（光标中的绿色指示器）。

## 与AI助手协作指南

### 请求帮助时

1. **提供明确上下文**

   - 描述您正在实现的功能或遇到的问题
   - 提供相关代码文件路径
   - 分享错误信息或期望行为

2. **明确任务类型**
   - 功能开发：描述需求、输入输出、交互逻辑
   - BUG修复：描述问题现象、复现步骤、期望结果
   - 代码优化：指出关注点、性能指标、优化方向

### AI响应规范

1. **分析问题**

   - 理解需求/问题本质
   - 检查相关代码和依赖
   - 考虑项目架构和最佳实践

2. **提供解决方案**

   - 给出清晰、可执行的代码
   - 解释实现思路和关键点
   - 提供测试建议

3. **后续跟进**
   - 解决方案实施后的验证方法
   - 可能的边缘情况和处理方法

- 推荐将上述规则写入 RULES.MD 或 CONTRIBUTING.md，团队/AI 共同遵守。
- 重要变更建议走 PR 流程，人工审核后合并。
  如需详细列出每个依赖的功能说明，或需要生成一份标准化的 RULES.MD，请告知！

一、依赖库及版本（来自 package.json）

   - 使用Vue DevTools检查组件层次和状态
   - 使用`console.log()`或`debugger`设置断点

3. **API调试**
   - 使用浏览器Network面板检查请求和响应
   - 使用Postman测试API端点

三、项目开发/协作规则建议（Cursor 专用，防止 AI 误操作）

1. **只允许在明确需求和计划下进行代码更改，禁止 AI 擅自重构、批量替换、删除未授权文件。**
2. **每次更改前，必须完整阅读相关文件，理解上下文，避免破坏现有业务逻辑。**
3. **所有更改需保留原有注释，所有修改调整需要注明注释，新增注释需说明"为何"而非"做什么"。**
4. **建议每次修改都在项目内的对应 .md 文件中完整记录，记录内容需包含修改人、修改时间、修改内容及修改原因**
